// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Jest                    = require("bs-jest/lib/js/src/jest.js");
var Index                   = require("../src/index.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function defaultSystem_000() {
  return /* () */0;
}

function defaultSystem_001(_, _$1) {
  return /* () */0;
}

function defaultSystem_002() {
  return "";
}

function defaultSystem_003() {
  return /* false */0;
}

var defaultSystem = /* record */[
  defaultSystem_000,
  defaultSystem_001,
  defaultSystem_002,
  defaultSystem_003
];

describe("brewery help", (function () {
        return Jest.test("it returns help", (function () {
                      var logs = [""];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = defaultSystem_001;
                      var system_002 = defaultSystem_002;
                      var system_003 = defaultSystem_003;
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "help"
                          ]);
                      return Jest.Expect[/* toBe */2]("here some help")(Jest.Expect[/* expect */0](logs[0]));
                    }));
      }));

describe("brewery init", (function () {
        Jest.test("installs brew when it's not there", (function () {
                var installBrew = [/* false */0];
                var system_000 = defaultSystem_000;
                var system_001 = defaultSystem_001;
                var system_002 = function (command) {
                  if (command === "brew") {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          [
                            "command_test.re",
                            40,
                            24
                          ]
                        ];
                  } else if (command === Index.installBrewScript) {
                    installBrew[0] = /* true */1;
                    return "install script output";
                  } else {
                    switch (command) {
                      case "brew cask list" : 
                          return "3\n4";
                      case "brew leaves" : 
                          return "first\nsecond";
                      default:
                        return "";
                    }
                  }
                };
                var system_003 = defaultSystem_003;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                return Jest.Expect[/* toEqual */12](/* true */1)(Jest.Expect[/* expect */0](installBrew[0]));
              }));
        Jest.test("creates a .brewery.json with the returned brew packages", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (command) {
                  switch (command) {
                    case "brew" : 
                        return "brew already installed";
                    case "brew cask list" : 
                        return "3\n4";
                    case "brew leaves" : 
                        return "first\nsecond";
                    default:
                      return "";
                  }
                };
                var system_003 = defaultSystem_003;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                var match = JSON.stringify({
                      cask: /* array */[
                        "3",
                        "4"
                      ],
                      brew: /* array */[
                        "first",
                        "second"
                      ]
                    });
                var brewConfigJson = match !== undefined ? match : "";
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                Index.breweryConfig,
                                brewConfigJson
                              ],
                              ".brewery.json created"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        Jest.test("returns an error when brew leaves throws and does not write .brewconfig", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (command) {
                  switch (command) {
                    case "brew" : 
                        return "brew already installed";
                    case "brew cask list" : 
                        return "3\n4";
                    case "brew leaves" : 
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              [
                                "command_test.re",
                                96,
                                31
                              ]
                            ];
                    default:
                      return "";
                  }
                };
                var system_003 = defaultSystem_003;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                "",
                                ""
                              ],
                              "error getting installed formulas"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        Jest.test("returns an error when brew cask install throws and does not write .brewconfig", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (command) {
                  switch (command) {
                    case "brew" : 
                        return "brew already installed";
                    case "brew cask list" : 
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              [
                                "command_test.re",
                                122,
                                34
                              ]
                            ];
                    case "brew leaves" : 
                        return "3\n4";
                    default:
                      return "";
                  }
                };
                var system_003 = defaultSystem_003;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                "",
                                ""
                              ],
                              "error getting installed formulas"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        return Jest.test("returns an error if .brewery.json is already there", (function () {
                      var logs = [""];
                      var writeFileRes = [/* tuple */[
                          "",
                          ""
                        ]];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = function (path, content) {
                        writeFileRes[0] = /* tuple */[
                          path,
                          content
                        ];
                        return /* () */0;
                      };
                      var system_002 = defaultSystem_002;
                      var system_003 = function (path) {
                        if (path === Index.breweryConfig) {
                          return /* true */1;
                        } else {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                [
                                  "command_test.re",
                                  144,
                                  75
                                ]
                              ];
                        }
                      };
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "init"
                          ]);
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* tuple */[
                                      "",
                                      ""
                                    ],
                                    Index.breweryConfig + " exists already"
                                  ])(Jest.Expect[/* expect */0](/* tuple */[
                                      writeFileRes[0],
                                      logs[0]
                                    ]));
                    }));
      }));

exports.defaultSystem = defaultSystem;
/*  Not a pure module */
