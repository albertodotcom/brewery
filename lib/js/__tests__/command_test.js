// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest                    = require("bs-jest/lib/js/src/jest.js");
var Index                   = require("../src/index.js");
var Utils                   = require("../src/utils.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function defaultSystem_000() {
  return /* () */0;
}

function defaultSystem_001(_, _$1) {
  return /* () */0;
}

function defaultSystem_002() {
  return "";
}

function defaultSystem_003() {
  return "";
}

function defaultSystem_004() {
  return /* false */0;
}

var defaultSystem = /* record */[
  defaultSystem_000,
  defaultSystem_001,
  defaultSystem_002,
  defaultSystem_003,
  defaultSystem_004
];

describe("brewery help", (function () {
        return Jest.test("it returns help", (function () {
                      var logs = [""];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = defaultSystem_001;
                      var system_002 = defaultSystem_002;
                      var system_003 = defaultSystem_003;
                      var system_004 = defaultSystem_004;
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003,
                        system_004
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "help"
                          ]);
                      return Jest.Expect[/* toContainString */11]("Hi from brewery üçª  here some help")(Jest.Expect[/* expect */0](logs[0]));
                    }));
      }));

describe("brewery init", (function () {
        Jest.test("installs brew when it's not there", (function () {
                var installBrew = [/* false */0];
                var system_000 = defaultSystem_000;
                var system_001 = defaultSystem_001;
                var system_002 = defaultSystem_002;
                var system_003 = function (command) {
                  if (command === "brew --version") {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          [
                            "command_test.re",
                            47,
                            34
                          ]
                        ];
                  } else if (command === Index.installBrewScript) {
                    installBrew[0] = /* true */1;
                    return "install script output";
                  } else {
                    switch (command) {
                      case "brew cask list" : 
                          return "3\n4\n";
                      case "brew leaves" : 
                          return "first\nsecond\n";
                      default:
                        return "";
                    }
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                return Jest.Expect[/* toEqual */12](/* true */1)(Jest.Expect[/* expect */0](installBrew[0]));
              }));
        Jest.test("creates a .brewery.json with the returned brew packages", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = defaultSystem_002;
                var system_003 = function (command) {
                  switch (command) {
                    case "brew --version" : 
                        return "brew already installed";
                    case "brew cask list" : 
                        return "3\n4\n";
                    case "brew leaves" : 
                        return "first\nsecond\n";
                    default:
                      return "";
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                var match = Utils.jsonStringfy({
                      cask: /* array */[
                        "3",
                        "4"
                      ],
                      brew: /* array */[
                        "first",
                        "second"
                      ]
                    });
                var brewConfigJson = match ? match[0] : "";
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                Index.breweryConfig,
                                brewConfigJson
                              ],
                              ".brewery.json created"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        Jest.test("returns an error when brew leaves throws and does not write .brewconfig", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = defaultSystem_002;
                var system_003 = function (command) {
                  switch (command) {
                    case "brew --version" : 
                        return "brew already installed";
                    case "brew cask list" : 
                        return "3\n4\n";
                    case "brew leaves" : 
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              [
                                "command_test.re",
                                105,
                                31
                              ]
                            ];
                    default:
                      return "";
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                "",
                                ""
                              ],
                              "error getting installed formulas"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        Jest.test("returns an error when brew cask install throws and does not write .brewconfig", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = defaultSystem_002;
                var system_003 = function (command) {
                  switch (command) {
                    case "brew --version" : 
                        return "brew already installed";
                    case "brew cask list" : 
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              [
                                "command_test.re",
                                130,
                                34
                              ]
                            ];
                    case "brew leaves" : 
                        return "3\n4\n";
                    default:
                      return "";
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "init"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                "",
                                ""
                              ],
                              "error getting installed formulas"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        return Jest.test("returns an error if .brewery.json is already there", (function () {
                      var logs = [""];
                      var writeFileRes = [/* tuple */[
                          "",
                          ""
                        ]];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = function (path, content) {
                        writeFileRes[0] = /* tuple */[
                          path,
                          content
                        ];
                        return /* () */0;
                      };
                      var system_002 = defaultSystem_002;
                      var system_003 = defaultSystem_003;
                      var system_004 = function (path) {
                        if (path === Index.breweryConfig) {
                          return /* true */1;
                        } else {
                          throw [
                                Caml_builtin_exceptions.assert_failure,
                                [
                                  "command_test.re",
                                  153,
                                  19
                                ]
                              ];
                        }
                      };
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003,
                        system_004
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "init"
                          ]);
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* tuple */[
                                      "",
                                      ""
                                    ],
                                    Index.breweryConfig + " exists already"
                                  ])(Jest.Expect[/* expect */0](/* tuple */[
                                      writeFileRes[0],
                                      logs[0]
                                    ]));
                    }));
      }));

describe("brewery install", (function () {
        var res = Utils.jsonStringfy({
              cask: /* array */["3"],
              brew: /* array */[
                "first",
                "second"
              ]
            });
        var initialBrewery = res ? res[0] : "error";
        Jest.test("installs brew when it's not there", (function () {
                var installBrew = [/* false */0];
                var system_000 = defaultSystem_000;
                var system_001 = defaultSystem_001;
                var system_002 = defaultSystem_002;
                var system_003 = function (command) {
                  if (command === "brew --version") {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          [
                            "command_test.re",
                            185,
                            34
                          ]
                        ];
                  } else if (command === Index.installBrewScript) {
                    installBrew[0] = /* true */1;
                    return "install script output";
                  } else {
                    switch (command) {
                      case "brew cask list" : 
                          return "3\n4\n";
                      case "brew leaves" : 
                          return "first\nsecond\n";
                      default:
                        return "";
                    }
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "install"
                    ]);
                return Jest.Expect[/* toEqual */12](/* true */1)(Jest.Expect[/* expect */0](installBrew[0]));
              }));
        Jest.test("adds brew package to .brewery.json", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var readFileRes = [""];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (path) {
                  readFileRes[0] = path;
                  return initialBrewery;
                };
                var system_003 = function (command) {
                  if (command === "brew --version") {
                    return "brew already installed";
                  } else {
                    return "";
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "install",
                      "yarn"
                    ]);
                var match = Utils.jsonStringfy({
                      cask: /* array */["3"],
                      brew: /* array */[
                        "first",
                        "second",
                        "yarn"
                      ]
                    });
                var brewConfigJson = match ? match[0] : "";
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                Index.breweryConfig,
                                brewConfigJson
                              ],
                              ".brewery.json updated"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        Jest.test("adds cask package to .brewery.json", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var readFileRes = [""];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (path) {
                  readFileRes[0] = path;
                  return initialBrewery;
                };
                var system_003 = function (command) {
                  if (command === "brew --version") {
                    return "brew already installed";
                  } else {
                    return "";
                  }
                };
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "install",
                      "cask",
                      "yay"
                    ]);
                var match = Utils.jsonStringfy({
                      cask: /* array */[
                        "3",
                        "yay"
                      ],
                      brew: /* array */[
                        "first",
                        "second"
                      ]
                    });
                var brewConfigJson = match ? match[0] : "";
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              /* tuple */[
                                Index.breweryConfig,
                                brewConfigJson
                              ],
                              ".brewery.json updated"
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                writeFileRes[0],
                                logs[0]
                              ]));
              }));
        return Jest.test("returns an error if .brewery.json isn't found", (function () {
                      var logs = [""];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = defaultSystem_001;
                      var system_002 = function () {
                        throw Caml_builtin_exceptions.not_found;
                      };
                      var system_003 = defaultSystem_003;
                      var system_004 = defaultSystem_004;
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003,
                        system_004
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "install",
                            "foo"
                          ]);
                      return Jest.Expect[/* toEqual */12]("Error loading " + (String(Index.breweryConfig) + ""))(Jest.Expect[/* expect */0](logs[0]));
                    }));
      }));

describe("brewery list", (function () {
        var res = Utils.jsonStringfy({
              cask: /* array */["3"],
              brew: /* array */[
                "first",
                "second"
              ]
            });
        var breweryConf = res ? res[0] : "error";
        Jest.test("shows installed packages", (function () {
                var logs = [""];
                var readFileRes = [""];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = defaultSystem_001;
                var system_002 = function (path) {
                  readFileRes[0] = path;
                  return breweryConf;
                };
                var system_003 = defaultSystem_003;
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "list"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              Index.breweryConfig,
                              breweryConf
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                readFileRes[0],
                                logs[0]
                              ]));
              }));
        return Jest.test("returns an error if .brewery.json isn't found", (function () {
                      var logs = [""];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = defaultSystem_001;
                      var system_002 = function () {
                        throw Caml_builtin_exceptions.not_found;
                      };
                      var system_003 = defaultSystem_003;
                      var system_004 = defaultSystem_004;
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003,
                        system_004
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "list"
                          ]);
                      return Jest.Expect[/* toEqual */12]("Error loading " + (String(Index.breweryConfig) + ""))(Jest.Expect[/* expect */0](logs[0]));
                    }));
      }));

describe("brewery uninstall", (function () {
        var toJson = function (brewery) {
          var res = Utils.jsonStringfy(brewery);
          if (res) {
            return res[0];
          } else {
            return "error";
          }
        };
        var initialBrewery = toJson({
              cask: /* array */[
                "3",
                "foo"
              ],
              brew: /* array */[
                "pluto",
                "tom"
              ]
            });
        Jest.test("removes the formula", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (path) {
                  var match = +(path === Index.breweryConfig);
                  if (match !== 0) {
                    return initialBrewery;
                  } else {
                    return "";
                  }
                };
                var system_003 = defaultSystem_003;
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                var expectedBrewery = toJson({
                      cask: /* array */[
                        "3",
                        "foo"
                      ],
                      brew: /* array */["tom"]
                    });
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "uninstall",
                      "pluto"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              ".brewery.json updated",
                              /* tuple */[
                                Index.breweryConfig,
                                expectedBrewery
                              ]
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                logs[0],
                                writeFileRes[0]
                              ]));
              }));
        Jest.test("removes the cask formula", (function () {
                var logs = [""];
                var writeFileRes = [/* tuple */[
                    "",
                    ""
                  ]];
                var system_000 = function (s) {
                  logs[0] = s;
                  return /* () */0;
                };
                var system_001 = function (path, content) {
                  writeFileRes[0] = /* tuple */[
                    path,
                    content
                  ];
                  return /* () */0;
                };
                var system_002 = function (path) {
                  var match = +(path === Index.breweryConfig);
                  if (match !== 0) {
                    return initialBrewery;
                  } else {
                    return "";
                  }
                };
                var system_003 = defaultSystem_003;
                var system_004 = defaultSystem_004;
                var system = /* record */[
                  system_000,
                  system_001,
                  system_002,
                  system_003,
                  system_004
                ];
                var expectedBrewery = toJson({
                      cask: /* array */["3"],
                      brew: /* array */[
                        "pluto",
                        "tom"
                      ]
                    });
                Index.run(system, /* array */[
                      "node",
                      "program",
                      "uninstall",
                      "cask",
                      "foo"
                    ]);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              ".brewery.json updated",
                              /* tuple */[
                                Index.breweryConfig,
                                expectedBrewery
                              ]
                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                logs[0],
                                writeFileRes[0]
                              ]));
              }));
        return Jest.test("returns an error if .brewery.json isn't found", (function () {
                      var logs = [""];
                      var system_000 = function (s) {
                        logs[0] = s;
                        return /* () */0;
                      };
                      var system_001 = defaultSystem_001;
                      var system_002 = function () {
                        throw Caml_builtin_exceptions.not_found;
                      };
                      var system_003 = defaultSystem_003;
                      var system_004 = defaultSystem_004;
                      var system = /* record */[
                        system_000,
                        system_001,
                        system_002,
                        system_003,
                        system_004
                      ];
                      Index.run(system, /* array */[
                            "node",
                            "program",
                            "uninstall",
                            "pluto"
                          ]);
                      return Jest.Expect[/* toEqual */12]("Error loading " + (String(Index.breweryConfig) + ""))(Jest.Expect[/* expect */0](logs[0]));
                    }));
      }));

exports.defaultSystem = defaultSystem;
/*  Not a pure module */
