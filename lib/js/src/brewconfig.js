// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Utils       = require("./utils.js");
var Result      = require("./result.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("bs-json/lib/js/src/Json_decode.js");

function make(brew, cask) {
  return /* record */[
          /* cask */List.map((function (p) {
                  return /* record */[/* name */p];
                }), cask),
          /* brew */List.map((function (p) {
                  return /* record */[/* name */p];
                }), brew)
        ];
}

function add(breweryfile, isCask, formulaName) {
  var formula = /* record */[/* name */formulaName];
  var match = isCask && 1 - List.exists((function (param) {
          return +(param[/* name */0] === formulaName);
        }), breweryfile[/* cask */0]);
  var match$1 = 1 - isCask && 1 - List.exists((function (param) {
          return +(param[/* name */0] === formulaName);
        }), breweryfile[/* brew */1]);
  return /* record */[
          /* cask */match !== 0 ? Pervasives.$at(breweryfile[/* cask */0], /* :: */[
                  formula,
                  /* [] */0
                ]) : breweryfile[/* cask */0],
          /* brew */match$1 !== 0 ? Pervasives.$at(breweryfile[/* brew */1], /* :: */[
                  formula,
                  /* [] */0
                ]) : breweryfile[/* brew */1]
        ];
}

function remove(breweryfile, isCask, formula) {
  var filterFormula = List.filter((function (p) {
          return +(p[/* name */0] !== formula);
        }));
  var match = 1 - isCask;
  return /* record */[
          /* cask */isCask !== 0 ? Curry._1(filterFormula, breweryfile[/* cask */0]) : breweryfile[/* cask */0],
          /* brew */match !== 0 ? Curry._1(filterFormula, breweryfile[/* brew */1]) : breweryfile[/* brew */1]
        ];
}

function toDict(breweryfile) {
  var dict = { };
  var formulas = function (formula) {
    return $$Array.of_list(List.map((function (param) {
                      return param[/* name */0];
                    }), formula));
  };
  dict["cask"] = formulas(breweryfile[/* cask */0]);
  dict["brew"] = formulas(breweryfile[/* brew */1]);
  return dict;
}

function toJson(breweryfile) {
  return Utils.jsonStringfy(toDict(breweryfile));
}

function fromJson(breweryfile) {
  var json;
  try {
    json = /* Ok */Block.__(0, [JSON.parse(breweryfile)]);
  }
  catch (exn){
    json = /* Error */Block.__(1, ["Error parsing JSON string"]);
  }
  var formula = function (json) {
    return /* record */[/* name */Json_decode.string(json)];
  };
  var categories = function (json) {
    return /* record */[
            /* cask */Json_decode.field("cask", (function (param) {
                    return Json_decode.list(formula, param);
                  }), json),
            /* brew */Json_decode.field("brew", (function (param) {
                    return Json_decode.list(formula, param);
                  }), json)
          ];
  };
  return Result.$less$$great(json, categories);
}

exports.make     = make;
exports.add      = add;
exports.remove   = remove;
exports.toDict   = toDict;
exports.toJson   = toJson;
exports.fromJson = fromJson;
/* No side effect */
