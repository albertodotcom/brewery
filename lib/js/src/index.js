// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs            = require("fs");
var Os            = require("os");
var List          = require("bs-platform/lib/js/list.js");
var $$Array       = require("bs-platform/lib/js/array.js");
var Block         = require("bs-platform/lib/js/block.js");
var Curry         = require("bs-platform/lib/js/curry.js");
var Utils         = require("./utils.js");
var Result        = require("./result.js");
var $$String      = require("bs-platform/lib/js/string.js");
var Process       = require("process");
var Brewconfig    = require("./brewconfig.js");
var Child_process = require("child_process");

var installBrewScript = "/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"";

function commandToString(command) {
  switch (command) {
    case 0 : 
        return "help";
    case 1 : 
        return "unknown";
    case 2 : 
        return "install";
    case 3 : 
        return "init";
    
  }
}

var breweryConfig = Os.homedir() + "/.brewery.json";

function tryCatch(fn, error) {
  try {
    return Curry._1(fn, /* () */0);
  }
  catch (exn){
    return error;
  }
}

function commandOfString(command) {
  var param = $$String.lowercase(command);
  switch (param) {
    case "help" : 
        return /* Help */0;
    case "init" : 
        return /* Init */3;
    case "install" : 
        return /* Install */2;
    default:
      return /* Unknown */1;
  }
}

function getCommandAndArguments(args) {
  if (args) {
    return /* tuple */[
            commandOfString(args[0]),
            args[1]
          ];
  } else {
    return /* tuple */[
            /* Unknown */1,
            /* [] */0
          ];
  }
}

function parseArguments(args) {
  return $$Array.to_list($$Array.sub(args, 2, args.length - 2 | 0));
}

function writeBrewFile(writeFile, brewConfig) {
  var match = Brewconfig.toJson(brewConfig);
  if (match) {
    Curry._2(writeFile, breweryConfig, match[0]);
    return /* Ok */Block.__(0, [/* () */0]);
  } else {
    return /* Error */Block.__(1, ["unable to create initial brewery.json"]);
  }
}

function loadBrewFile(readFile, _) {
  var param = Brewconfig.fromJson($$String.trim(Curry._1(readFile, breweryConfig)));
  if (param.tag) {
    return /* Error */Block.__(1, [param[0]]);
  } else {
    return /* Ok */Block.__(0, [param[0]]);
  }
}

function getInstalledFormulas(exec, _) {
  return tryCatch((function () {
                var getInstalledFormulasFor = function (command) {
                  var leaves = Curry._1(Utils.stringOfBuffer, Curry._1(exec, command));
                  return List.map((function (s) {
                                return s;
                              }), $$Array.to_list($$String.trim(leaves).split("\n")));
                };
                return /* Ok */Block.__(0, [Brewconfig.make(getInstalledFormulasFor("brew leaves"), getInstalledFormulasFor("brew cask list"))]);
              }), /* Error */Block.__(1, ["error getting installed formulas"]));
}

function installBrew(exec) {
  return tryCatch((function () {
                Curry._1(exec, installBrewScript);
                return /* Ok */Block.__(0, [/* () */0]);
              }), /* Error */Block.__(1, ["error installing brew"]));
}

function isBrewInstalled(exec) {
  try {
    Curry._1(exec, "brew --version");
    return /* true */1;
  }
  catch (exn){
    return /* false */0;
  }
}

function installFormula(exec, args, brewConfig) {
  var getFormula = function () {
    if (List.hd(args) === "cask") {
      return /* tuple */[
              List.nth(args, 1),
              /* true */1
            ];
    } else {
      return /* tuple */[
              List.hd(args),
              /* false */0
            ];
    }
  };
  return Result.$great$great$eq(tryCatch((function () {
                    return /* Ok */Block.__(0, [getFormula(/* () */0)]);
                  }), /* Error */Block.__(1, ["No formula has been passed"])), (function (param) {
                var isCask = param[1];
                var formula = param[0];
                return Result.$less$$great(tryCatch((function () {
                                  Curry._1(exec, "brew install " + (
                                        isCask ? "cask" + formula : formula
                                      ));
                                  return /* Ok */Block.__(0, [/* () */0]);
                                }), /* Error */Block.__(1, ["Error installing " + (formula + " formula")])), (function () {
                              return Brewconfig.add(brewConfig, isCask, formula);
                            }));
              }));
}

function installBrewIfNeeded(exec) {
  if (isBrewInstalled(exec)) {
    return /* Ok */Block.__(0, [/* () */0]);
  } else {
    return installBrew(exec);
  }
}

function execCommand(system, param) {
  var args = param[1];
  var command = param[0];
  switch (command) {
    case 0 : 
        return /* Ok */Block.__(0, ["here some help"]);
    case 1 : 
        Curry._1(system[/* log */0], "I don't know " + (commandToString(command) + " command"));
        return /* Error */Block.__(1, [commandToString(command)]);
    case 2 : 
        var partial_arg = system[/* readFile */2];
        var partial_arg$1 = system[/* exec */3];
        var partial_arg$2 = system[/* writeFile */1];
        var res = Result.$great$great$eq(Result.$great$great$eq(Result.$great$great$eq(installBrewIfNeeded(system[/* exec */3]), (function (param) {
                        return loadBrewFile(partial_arg, param);
                      })), (function (param) {
                    return installFormula(partial_arg$1, args, param);
                  })), (function (param) {
                return writeBrewFile(partial_arg$2, param);
              }));
        if (res.tag) {
          return /* Error */Block.__(1, [res[0]]);
        } else {
          return /* Ok */Block.__(0, [".brewery.json updated"]);
        }
        break;
    case 3 : 
        var writeBrewFileIfDoesNotExists = function (brewConfig) {
          if (Curry._1(system[/* fileExists */4], breweryConfig)) {
            return /* Error */Block.__(1, [breweryConfig + " exists already"]);
          } else {
            return writeBrewFile(system[/* writeFile */1], brewConfig);
          }
        };
        var partial_arg$3 = system[/* exec */3];
        var res$1 = Result.$great$great$eq(Result.$great$great$eq(installBrewIfNeeded(system[/* exec */3]), (function (param) {
                    return getInstalledFormulas(partial_arg$3, param);
                  })), writeBrewFileIfDoesNotExists);
        if (res$1.tag) {
          return /* Error */Block.__(1, [res$1[0]]);
        } else {
          return /* Ok */Block.__(0, [".brewery.json created"]);
        }
        break;
    
  }
}

function run(system, stdin) {
  var res = execCommand(system, getCommandAndArguments(parseArguments(stdin)));
  return Curry._1(system[/* log */0], res[0]);
}

function system_000(prim) {
  console.log(prim);
  return /* () */0;
}

function system_001(prim, prim$1) {
  Fs.writeFileSync(prim, prim$1, "utf8");
  return /* () */0;
}

function system_002(prim) {
  return Fs.readFileSync(prim, "utf8");
}

function system_003(command) {
  return Child_process.execSync(command, { });
}

function system_004(filePath) {
  return tryCatch((function () {
                Fs.readFileSync(filePath, "utf8");
                return /* true */1;
              }), /* false */0);
}

var system = /* record */[
  system_000,
  system_001,
  system_002,
  system_003,
  system_004
];

run(system, Process.argv);

exports.installBrewScript      = installBrewScript;
exports.commandToString        = commandToString;
exports.breweryConfig          = breweryConfig;
exports.tryCatch               = tryCatch;
exports.commandOfString        = commandOfString;
exports.getCommandAndArguments = getCommandAndArguments;
exports.parseArguments         = parseArguments;
exports.writeBrewFile          = writeBrewFile;
exports.loadBrewFile           = loadBrewFile;
exports.getInstalledFormulas   = getInstalledFormulas;
exports.installBrew            = installBrew;
exports.isBrewInstalled        = isBrewInstalled;
exports.installFormula         = installFormula;
exports.installBrewIfNeeded    = installBrewIfNeeded;
exports.execCommand            = execCommand;
exports.run                    = run;
exports.system                 = system;
/* breweryConfig Not a pure module */
