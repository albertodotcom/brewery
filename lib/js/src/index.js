// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs         = require("fs");
var Os         = require("os");
var $$Array    = require("bs-platform/lib/js/array.js");
var Block      = require("bs-platform/lib/js/block.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var $$String   = require("bs-platform/lib/js/string.js");
var Process    = require("process");
var Brewconfig = require("./brewconfig.js");

function commandToString(command) {
  switch (command) {
    case 0 : 
        return "help";
    case 1 : 
        return "unknown";
    case 2 : 
        return "init";
    
  }
}

var breweryConfig = Os.homedir() + "/.brewery.json";

function execCommand(system, param) {
  var command = param[0];
  switch (command) {
    case 0 : 
        return /* Ok */Block.__(0, ["here some help"]);
    case 1 : 
        console.log("I don't know " + (commandToString(command) + " command"));
        return /* Error */Block.__(1, [commandToString(command)]);
    case 2 : 
        var brewConfig = JSON.stringify(Brewconfig.toDict(Brewconfig.make(/* () */0)));
        if (brewConfig !== undefined) {
          Curry._2(system[/* writeFile */1], breweryConfig, brewConfig);
          return /* Ok */Block.__(0, [".brewery.json created"]);
        } else {
          return /* Error */Block.__(1, ["unable to create initial brewery.json"]);
        }
    
  }
}

function commandOfString(command) {
  var param = $$String.lowercase(command);
  switch (param) {
    case "help" : 
        return /* Help */0;
    case "init" : 
        return /* Init */2;
    default:
      return /* Unknown */1;
  }
}

function getCommand(args) {
  if (args) {
    return /* tuple */[
            commandOfString(args[0]),
            args[1]
          ];
  } else {
    return /* tuple */[
            /* Unknown */1,
            /* [] */0
          ];
  }
}

function parseArguments(args) {
  return $$Array.to_list($$Array.sub(args, 2, args.length - 2 | 0));
}

function run(system, stdin) {
  var res = execCommand(system, getCommand(parseArguments(stdin)));
  return Curry._1(system[/* log */0], res[0]);
}

function system_000(prim) {
  console.log(prim);
  return /* () */0;
}

function system_001(prim, prim$1) {
  Fs.writeFileSync(prim, prim$1, "utf8");
  return /* () */0;
}

var system = /* record */[
  system_000,
  system_001
];

run(system, Process.argv);

exports.commandToString = commandToString;
exports.breweryConfig   = breweryConfig;
exports.execCommand     = execCommand;
exports.commandOfString = commandOfString;
exports.getCommand      = getCommand;
exports.parseArguments  = parseArguments;
exports.run             = run;
exports.system          = system;
/* breweryConfig Not a pure module */
